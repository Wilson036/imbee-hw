import Head from 'next/head';
import Image from 'next/image';
import { Inter } from '@next/font/google';
import styles from '../styles/Home.module.css';
import { Button, Spin, Input } from 'antd';
import { useEffect, useState } from 'react';
import axios from 'axios';
import { useInfiniteQuery, useQuery } from 'react-query';
import InfiniteScroll from 'react-infinite-scroll-component';

const inter = Inter({ subsets: ['latin'] });

const fetchTags = (tag: string) =>
  axios
    .get(
      `https://api.stackexchange.com/2.3/tags?key=U4DMV*8nvpm3EOpvf69Rxw((&site=stackoverflow&page=1&pagesize=10&order=desc&sort=popular&inname=${tag}&filter=default`
    )
    .then((resp) => resp.data);

const fetchQuestions = (selectedTag: string, page: number) =>
  axios
    .get(
      `https://api.stackexchange.com/2.3/questions?key=U4DMV*8nvpm3EOpvf69Rxw((&site=stackoverflow&page=${page}&pagesize=20&order=desc&sort=activity&tagged=${selectedTag}&filter=default`
    )
    .then((resp) => resp.data);

export default function Home() {
  const [page, setPage] = useState(1);
  const [searchTag, setSearchTag] = useState('');
  const [selectedTag, setSelectTag] = useState('');

  const { data: tags, isLoading } = useQuery(
    ['searchTag', searchTag],
    async () => {
      const resp = await fetchTags(searchTag);
      const { items } = resp;
      !selectedTag && setSelectTag(items[0].name);
      return items;
    }
  );
  const {
    data: questions,
    error,
    fetchNextPage,
    hasNextPage,
    isFetching,
    isFetchingNextPage,
    status,
  } = useInfiniteQuery(
    ['selectedTag', selectedTag],
    ({ pageParam = 1 }) => fetchQuestions(selectedTag, pageParam),
    {
      select: (data) => ({
        ...data,
        pages: data.pages.flatMap(({ items }) => items),
      }),
      getNextPageParam: (lastPage, pages) => {
        console.log({ lastPage, pages });
        return pages.length;
      },
    }
  );
  console.log({ tags, questions, hasNextPage });

  if (isLoading) {
    return <Spin />;
  }

  return (
    <>
      <Head>
        <title>Im Bee</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Input.Search
          placeholder="input search text"
          allowClear
          enterButton="Search"
          size="large"
          onSearch={(value) => {
            setSearchTag(value);
          }}
        />
        <div>
          {tags.map(({ name }) => (
            <Button
              type="primary"
              shape="round"
              size="large"
              key={name}
              onClick={() => {
                setSelectTag(name);
              }}
            >
              {name}
            </Button>
          ))}
        </div>
        <div id="scrollableDiv" style={{ height: 250, overflowY: 'scroll' }}>
          <InfiniteScroll
            dataLength={questions?.pages.length ?? 0}
            next={fetchNextPage}
            hasMore={true}
            loader={<h4>Loading...</h4>}
            scrollableTarget="scrollableDiv"
          >
            {questions?.pages.map((question, index) => (
              <div key={index}> {question.title}</div>
            ))}
          </InfiniteScroll>
        </div>
      </main>
    </>
  );
}
